#usda 1.0
(
    "ZephyrSim Bird Asset"
    defaultPrim = "Bird"
)

def Xform "Bird" (
    kind = "component"
)
{
    def Mesh "Body" (
        prepend apiSchemas = ["PhysicsCollisionAPI", "PhysicsRigidBodyAPI"]
    )
    {
        float3[] extent = [(-0.1, -0.05, -0.15), (0.1, 0.05, 0.15)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
        point3f[] points = [(-0.1, -0.05, -0.15), (0.1, -0.05, -0.15), (0.1, 0.05, -0.15), (-0.1, 0.05, -0.15), (-0.1, -0.05, 0.15), (0.1, -0.05, 0.15), (0.1, 0.05, 0.15), (-0.1, 0.05, 0.15)]
        color3f[] primvars:displayColor = [(0.6, 0.4, 0.2)]
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:scale"]
    }
    
    def Xform "Wing1" (
        prepend apiSchemas = ["PhysicsCollisionAPI"]
    )
    {
        double3 xformOp:translate = (0.15, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
        
        def Mesh "Wing" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.05, -0.01, -0.1), (0.05, 0.01, 0.1)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
            point3f[] points = [(-0.05, -0.01, -0.1), (0.05, -0.01, -0.1), (0.05, 0.01, -0.1), (-0.05, 0.01, -0.1), (-0.05, -0.01, 0.1), (0.05, -0.01, 0.1), (0.05, 0.01, 0.1), (-0.05, 0.01, 0.1)]
            color3f[] primvars:displayColor = [(0.5, 0.3, 0.1)]
        }
    }
    
    def Xform "Wing2" (
        prepend apiSchemas = ["PhysicsCollisionAPI"]
    )
    {
        double3 xformOp:translate = (-0.15, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate"]
        
        def Mesh "Wing" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.05, -0.01, -0.1), (0.05, 0.01, 0.1)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
            point3f[] points = [(-0.05, -0.01, -0.1), (0.05, -0.01, -0.1), (0.05, 0.01, -0.1), (-0.05, 0.01, -0.1), (-0.05, -0.01, 0.1), (0.05, -0.01, 0.1), (0.05, 0.01, 0.1), (-0.05, 0.01, 0.1)]
            color3f[] primvars:displayColor = [(0.5, 0.3, 0.1)]
        }
    }
    
    def Xform "Tail" (
        prepend apiSchemas = ["PhysicsCollisionAPI"]
    )
    {
        double3 xformOp:translate = (0, 0, -0.2)
        uniform token[] xformOpOrder = ["xformOp:translate"]
        
        def Mesh "Tail" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.03, -0.01, -0.05), (0.03, 0.01, 0.05)]
            int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
            int[] faceVertexIndices = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]
            point3f[] points = [(-0.03, -0.01, -0.05), (0.03, -0.01, -0.05), (0.03, 0.01, -0.05), (-0.03, 0.01, -0.05), (-0.03, -0.01, 0.05), (0.03, -0.01, 0.05), (0.03, 0.01, 0.05), (-0.03, 0.01, 0.05)]
            color3f[] primvars:displayColor = [(0.4, 0.2, 0.0)]
        }
    }
} 